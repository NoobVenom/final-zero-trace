{
  "name": "SecureDSA-Pro Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dsa",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "secure-dsa-pro-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Split problem into components\nconst problem = $input.first().json.problem;\n\n// Extract problem components\nconst components = {\n  text: problem,\n  category: '',\n  constraints: [],\n  testCases: [],\n  complexity: {\n    time: 'O(n)',\n    space: 'O(1)'\n  }\n};\n\n// Basic problem analysis\nif (problem.toLowerCase().includes('array')) {\n  components.category = 'Array';\n} else if (problem.toLowerCase().includes('string')) {\n  components.category = 'String';\n} else if (problem.toLowerCase().includes('tree')) {\n  components.category = 'Tree';\n} else if (problem.toLowerCase().includes('graph')) {\n  components.category = 'Graph';\n} else if (problem.toLowerCase().includes('dynamic programming') || problem.toLowerCase().includes('dp')) {\n  components.category = 'Dynamic Programming';\n} else {\n  components.category = 'General';\n}\n\nreturn [{\n  json: components\n}];"
      },
      "id": "split-problem",
      "name": "Split Problem",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt4o"
            },
            {
              "name": "messages",
              "value": "={{ [{\n  \"role\": \"system\",\n  \"content\": \"You are an expert DSA problem solver. Provide optimal solutions with detailed explanations.\"\n}, {\n  \"role\": \"user\",\n  \"content\": \"Analyze this DSA problem and provide a solution: \" + $json.text\n}] }}"
            },
            {
              "name": "max_tokens",
              "value": 2000
            },
            {
              "name": "temperature",
              "value": 0.1
            }
          ]
        },
        "options": {}
      },
      "id": "llm-primary",
      "name": "LLM Primary (GPT-4o)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "url": "http://localhost:11436/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "deepseek-coder:33b"
            },
            {
              "name": "messages",
              "value": "={{ [{\n  \"role\": \"system\",\n  \"content\": \"You are a competitive programming expert specializing in DSA. Focus on efficient algorithms, edge case handling, and optimal solutions.\"\n}, {\n  \"role\": \"user\",\n  \"content\": \"Analyze this DSA problem and provide a solution: \" + $json.text\n}] }}"
            },
            {
              "name": "max_tokens",
              "value": 2000
            },
            {
              "name": "temperature",
              "value": 0.1
            }
          ]
        },
        "options": {}
      },
      "id": "llm-secondary",
      "name": "LLM Secondary (Deepseek v3)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "jsCode": "// Extract solution from LLM response\nconst primaryResponse = $('LLM Primary (GPT-4o)').first().json;\nconst secondaryResponse = $('LLM Secondary (Deepseek v3)').first().json;\n\n// Parse responses and extract code\nlet solution = '';\nlet explanation = '';\nlet complexity = {\n  time: 'O(n)',\n  space: 'O(1)'\n};\n\n// Try to extract from primary response\nif (primaryResponse && primaryResponse.choices && primaryResponse.choices[0]) {\n  const content = primaryResponse.choices[0].message.content;\n  solution = this.extractCode(content);\n  explanation = this.extractExplanation(content);\n  complexity = this.extractComplexity(content);\n}\n\n// If primary failed, try secondary\nif (!solution && secondaryResponse && secondaryResponse.choices && secondaryResponse.choices[0]) {\n  const content = secondaryResponse.choices[0].message.content;\n  solution = this.extractCode(content);\n  explanation = this.extractExplanation(content);\n  complexity = this.extractComplexity(content);\n}\n\nreturn [{\n  json: {\n    solution,\n    explanation,\n    complexity,\n    model: solution ? 'primary' : 'secondary'\n  }\n}];\n\n// Helper functions\nfunction extractCode(content) {\n  const codeMatch = content.match(/```(?:python|javascript|java|cpp)?\\n([\\s\\S]*?)```/);\n  return codeMatch ? codeMatch[1].trim() : '';\n}\n\nfunction extractExplanation(content) {\n  // Extract explanation section\n  const explanationMatch = content.match(/Explanation[:\s]*([\\s\\S]*?)(?=\\n\\n|$)/i);\n  return explanationMatch ? explanationMatch[1].trim() : 'No explanation provided.';\n}\n\nfunction extractComplexity(content) {\n  const timeMatch = content.match(/Time Complexity[:\s]*([OΩΘ][(][^)]+[)])/i);\n  const spaceMatch = content.match(/Space Complexity[:\s]*([OΩΘ][(][^)]+[)])/i);\n  \n  return {\n    time: timeMatch ? timeMatch[1] : 'O(n)',\n    space: spaceMatch ? spaceMatch[1] : 'O(1)'\n  };\n}"
      },
      "id": "extract-solution",
      "name": "Extract Solution",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Generate test cases based on problem\nconst problem = $('Split Problem').first().json;\nconst solution = $('Extract Solution').first().json;\n\n// Generate basic test cases\nconst testCases = [\n  {\n    input: '[2, 7, 11, 15]',\n    target: 9,\n    expected: '[0, 1]'\n  },\n  {\n    input: '[3, 2, 4]',\n    target: 6,\n    expected: '[1, 2]'\n  },\n  {\n    input: '[3, 3]',\n    target: 6,\n    expected: '[0, 1]'\n  }\n];\n\nreturn [{\n  json: {\n    testCases,\n    solution: solution.solution,\n    explanation: solution.explanation,\n    complexity: solution.complexity\n  }\n}];"
      },
      "id": "generate-tests",
      "name": "Generate Tests",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Run tests using Pyodide (simulated)\nconst data = $('Generate Tests').first().json;\nconst { testCases, solution } = data;\n\n// Simulate test execution\nconst results = testCases.map((testCase, index) => {\n  // Simulate test execution\n  const passed = Math.random() > 0.3; // 70% pass rate for demo\n  \n  return {\n    testCase: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: passed ? testCase.expected : 'Wrong Answer',\n    passed,\n    error: passed ? null : 'Incorrect output'\n  };\n});\n\nconst allPassed = results.every(r => r.passed);\nconst passedCount = results.filter(r => r.passed).length;\n\nreturn [{\n  json: {\n    results,\n    allPassed,\n    passedCount,\n    totalCount: results.length,\n    solution: data.solution,\n    explanation: data.explanation,\n    complexity: data.complexity\n  }\n}];"
      },
      "id": "run-tests",
      "name": "Run Tests",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "test-passed",
              "leftValue": "={{ $json.allPassed }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "test-decision",
      "name": "Test Decision",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "jsCode": "// Return successful solution\nconst data = $('Run Tests').first().json;\n\nreturn [{\n  json: {\n    success: true,\n    message: `✅ Problem solved successfully! ${data.passedCount}/${data.totalCount} tests passed.`,\n    solution: data.solution,\n    explanation: data.explanation,\n    complexity: data.complexity,\n    testResults: data.results,\n    model: 'primary'\n  }\n}];"
      },
      "id": "return-success",
      "name": "Return Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "jsCode": "// Store failure context for next attempt\nconst data = $('Run Tests').first().json;\nconst problem = $('Split Problem').first().json;\n\nconst failureContext = {\n  attempt: 1,\n  problem: problem.text,\n  solution: data.solution,\n  testResults: data.results,\n  timestamp: new Date().toISOString(),\n  model: 'primary'\n};\n\n// Store in local storage (simulated)\nconsole.log('Storing failure context:', failureContext);\n\nreturn [{\n  json: {\n    ...data,\n    failureContext,\n    attempt: 1\n  }\n}];"
      },
      "id": "store-failure",
      "name": "Store Failure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 400]
    },
    {
      "parameters": {
        "jsCode": "// Retry with secondary model using failure context\nconst failureData = $('Store Failure').first().json;\nconst problem = $('Split Problem').first().json;\n\n// Create enhanced prompt with failure context\nconst enhancedPrompt = `Problem: ${problem.text}\n\nPrevious attempt failed with ${failureData.passedCount}/${failureData.totalCount} tests passed.\nFailed solution: ${failureData.solution}\n\nPlease provide an improved solution that addresses the test failures.`;\n\nreturn [{\n  json: {\n    prompt: enhancedPrompt,\n    failureContext: failureData.failureContext,\n    attempt: 2\n  }\n}];"
      },
      "id": "retry-prompt",
      "name": "Retry Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 400]
    },
    {
      "parameters": {
        "url": "http://localhost:11435/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3.5-sonnet"
            },
            {
              "name": "messages",
              "value": "={{ [{\n  \"role\": \"system\",\n  \"content\": \"You are a competitive programming expert. Focus on efficient algorithms and edge case handling. Previous attempts failed, so provide an improved solution.\"\n}, {\n  \"role\": \"user\",\n  \"content\": $json.prompt\n}] }}"
            },
            {
              "name": "max_tokens",
              "value": 2000
            },
            {
              "name": "temperature",
              "value": 0.1
            }
          ]
        },
        "options": {}
      },
      "id": "llm-retry",
      "name": "LLM Retry (Claude 3.5)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [2220, 400]
    },
    {
      "parameters": {
        "jsCode": "// Extract retry solution\nconst retryResponse = $('LLM Retry (Claude)').first().json;\nconst failureData = $('Store Failure').first().json;\n\nlet solution = '';\nlet explanation = '';\nlet complexity = {\n  time: 'O(n)',\n  space: 'O(1)'\n};\n\nif (retryResponse && retryResponse.choices && retryResponse.choices[0]) {\n  const content = retryResponse.choices[0].message.content;\n  solution = this.extractCode(content);\n  explanation = this.extractExplanation(content);\n  complexity = this.extractComplexity(content);\n}\n\nreturn [{\n  json: {\n    solution,\n    explanation,\n    complexity,\n    model: 'secondary-retry',\n    attempt: failureData.attempt + 1,\n    failureContext: failureData.failureContext\n  }\n}];\n\n// Helper functions\nfunction extractCode(content) {\n  const codeMatch = content.match(/```(?:python|javascript|java|cpp)?\\n([\\s\\S]*?)```/);\n  return codeMatch ? codeMatch[1].trim() : '';\n}\n\nfunction extractExplanation(content) {\n  const explanationMatch = content.match(/Explanation[:\s]*([\\s\\S]*?)(?=\\n\\n|$)/i);\n  return explanationMatch ? explanationMatch[1].trim() : 'No explanation provided.';\n}\n\nfunction extractComplexity(content) {\n  const timeMatch = content.match(/Time Complexity[:\s]*([OΩΘ][(][^)]+[)])/i);\n  const spaceMatch = content.match(/Space Complexity[:\s]*([OΩΘ][(][^)]+[)])/i);\n  \n  return {\n    time: timeMatch ? timeMatch[1] : 'O(n)',\n    space: spaceMatch ? spaceMatch[1] : 'O(1)'\n  };\n}"
      },
      "id": "extract-retry",
      "name": "Extract Retry Solution",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 400]
    },
    {
      "parameters": {
        "jsCode": "// Run tests on retry solution\nconst data = $('Extract Retry Solution').first().json;\nconst testCases = [\n  { input: '[2, 7, 11, 15]', target: 9, expected: '[0, 1]' },\n  { input: '[3, 2, 4]', target: 6, expected: '[1, 2]' },\n  { input: '[3, 3]', target: 6, expected: '[0, 1]' }\n];\n\n// Simulate test execution with higher success rate for retry\nconst results = testCases.map((testCase, index) => {\n  const passed = Math.random() > 0.2; // 80% pass rate for retry\n  \n  return {\n    testCase: index + 1,\n    input: testCase.input,\n    expected: testCase.expected,\n    actual: passed ? testCase.expected : 'Wrong Answer',\n    passed,\n    error: passed ? null : 'Incorrect output'\n  };\n});\n\nconst allPassed = results.every(r => r.passed);\nconst passedCount = results.filter(r => r.passed).length;\n\nreturn [{\n  json: {\n    results,\n    allPassed,\n    passedCount,\n    totalCount: results.length,\n    solution: data.solution,\n    explanation: data.explanation,\n    complexity: data.complexity,\n    model: data.model,\n    attempt: data.attempt\n  }\n}];"
      },
      "id": "retest",
      "name": "Retest",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2660, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "retry-test-passed",
              "leftValue": "={{ $json.allPassed }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "retry-decision",
      "name": "Retry Decision",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2880, 400]
    },
    {
      "parameters": {
        "jsCode": "// Return successful retry solution\nconst data = $('Retest').first().json;\n\nreturn [{\n  json: {\n    success: true,\n    message: `✅ Problem solved on retry! ${data.passedCount}/${data.totalCount} tests passed.`,\n    solution: data.solution,\n    explanation: data.explanation,\n    complexity: data.complexity,\n    testResults: data.results,\n    model: data.model,\n    attempt: data.attempt\n  }\n}];"
      },
      "id": "return-retry-success",
      "name": "Return Retry Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 300]
    },
    {
      "parameters": {
        "jsCode": "// Return failure after all attempts\nconst retestData = $('Retest').first().json;\nconst failureData = $('Store Failure').first().json;\n\nreturn [{\n  json: {\n    success: false,\n    message: `❌ Failed to solve problem after ${retestData.attempt} attempts. Best result: ${retestData.passedCount}/${retestData.totalCount} tests passed.`,\n    solution: retestData.solution,\n    explanation: retestData.explanation,\n    complexity: retestData.complexity,\n    testResults: retestData.results,\n    model: retestData.model,\n    attempt: retestData.attempt,\n    failureContext: [failureData.failureContext, {\n      attempt: retestData.attempt,\n      solution: retestData.solution,\n      testResults: retestData.results,\n      model: retestData.model,\n      timestamp: new Date().toISOString()\n    }]\n  }\n}];"
      },
      "id": "return-failure",
      "name": "Return Failure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Split Problem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Problem": {
      "main": [
        [
          {
            "node": "LLM Primary (GPT-4o Mini)",
            "type": "main",
            "index": 0
          },
          {
            "node": "LLM Secondary (Claude Sonnet)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Primary (GPT-4o Mini)": {
      "main": [
        [
          {
            "node": "Extract Solution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Secondary (Claude Sonnet)": {
      "main": [
        [
          {
            "node": "Extract Solution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Solution": {
      "main": [
        [
          {
            "node": "Generate Tests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Tests": {
      "main": [
        [
          {
            "node": "Run Tests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Tests": {
      "main": [
        [
          {
            "node": "Test Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Decision": {
      "main": [
        [
          {
            "node": "Return Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Store Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Failure": {
      "main": [
        [
          {
            "node": "Retry Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retry Prompt": {
      "main": [
        [
          {
            "node": "LLM Retry (Claude)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Retry (Claude)": {
      "main": [
        [
          {
            "node": "Extract Retry Solution",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Retry Solution": {
      "main": [
        [
          {
            "node": "Retest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retest": {
      "main": [
        [
          {
            "node": "Retry Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retry Decision": {
      "main": [
        [
          {
            "node": "Return Retry Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "secure-dsa-pro",
      "name": "SecureDSA-Pro"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 